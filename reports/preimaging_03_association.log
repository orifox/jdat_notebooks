Traceback (most recent call last):
  File "/usr/share/miniconda/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/share/miniconda/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# we read the input source catalogue
pointsource_catalog = Table.read('preimaging/pointsource_LMCcalField_F150W.cat', format='ascii')
pointsource_ra = pointsource_catalog['x_or_RA']
pointsource_dec = pointsource_catalog['y_or_Dec']

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
Input [0;32mIn [7][0m, in [0;36m<cell line: 2>[0;34m()[0m
[1;32m      1[0m [38;5;66;03m# we read the input source catalogue[39;00m
[0;32m----> 2[0m pointsource_catalog [38;5;241m=[39m [43mTable[49m[38;5;241;43m.[39;49m[43mread[49m[43m([49m[38;5;124;43m'[39;49m[38;5;124;43mpreimaging/pointsource_LMCcalField_F150W.cat[39;49m[38;5;124;43m'[39;49m[43m,[49m[43m [49m[38;5;28;43mformat[39;49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mascii[39;49m[38;5;124;43m'[39;49m[43m)[49m
[1;32m      3[0m pointsource_ra [38;5;241m=[39m pointsource_catalog[[38;5;124m'[39m[38;5;124mx_or_RA[39m[38;5;124m'[39m]
[1;32m      4[0m pointsource_dec [38;5;241m=[39m pointsource_catalog[[38;5;124m'[39m[38;5;124my_or_Dec[39m[38;5;124m'[39m]

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/astropy/table/connect.py:62[0m, in [0;36mTableRead.__call__[0;34m(self, *args, **kwargs)[0m
[1;32m     59[0m units [38;5;241m=[39m kwargs[38;5;241m.[39mpop([38;5;124m'[39m[38;5;124munits[39m[38;5;124m'[39m, [38;5;28;01mNone[39;00m)
[1;32m     60[0m descriptions [38;5;241m=[39m kwargs[38;5;241m.[39mpop([38;5;124m'[39m[38;5;124mdescriptions[39m[38;5;124m'[39m, [38;5;28;01mNone[39;00m)
[0;32m---> 62[0m out [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mregistry[49m[38;5;241;43m.[39;49m[43mread[49m[43m([49m[38;5;28;43mcls[39;49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m     64[0m [38;5;66;03m# For some readers (e.g., ascii.ecsv), the returned `out` class is not[39;00m
[1;32m     65[0m [38;5;66;03m# guaranteed to be the same as the desired output `cls`.  If so,[39;00m
[1;32m     66[0m [38;5;66;03m# try coercing to desired class without copying (io.registry.read[39;00m
[1;32m     67[0m [38;5;66;03m# would normally do a copy).  The normal case here is swapping[39;00m
[1;32m     68[0m [38;5;66;03m# Table <=> QTable.[39;00m
[1;32m     69[0m [38;5;28;01mif[39;00m [38;5;28mcls[39m [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m out[38;5;241m.[39m[38;5;18m__class__[39m:

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/astropy/io/registry/core.py:199[0m, in [0;36mUnifiedInputRegistry.read[0;34m(self, cls, format, cache, *args, **kwargs)[0m
[1;32m    195[0m     [38;5;28mformat[39m [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_get_valid_format(
[1;32m    196[0m         [38;5;124m'[39m[38;5;124mread[39m[38;5;124m'[39m, [38;5;28mcls[39m, path, fileobj, args, kwargs)
[1;32m    198[0m reader [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mget_reader([38;5;28mformat[39m, [38;5;28mcls[39m)
[0;32m--> 199[0m data [38;5;241m=[39m [43mreader[49m[43m([49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m    201[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28misinstance[39m(data, [38;5;28mcls[39m):
[1;32m    202[0m     [38;5;66;03m# User has read with a subclass where only the parent class is[39;00m
[1;32m    203[0m     [38;5;66;03m# registered.  This returns the parent class, so try coercing[39;00m
[1;32m    204[0m     [38;5;66;03m# to desired subclass.[39;00m
[1;32m    205[0m     [38;5;28;01mtry[39;00m:

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/astropy/io/ascii/connect.py:18[0m, in [0;36mio_read[0;34m(format, filename, **kwargs)[0m
[1;32m     16[0m     [38;5;28mformat[39m [38;5;241m=[39m re[38;5;241m.[39msub([38;5;124mr[39m[38;5;124m'[39m[38;5;124m^ascii[39m[38;5;124m\[39m[38;5;124m.[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124m'[39m, [38;5;28mformat[39m)
[1;32m     17[0m     kwargs[[38;5;124m'[39m[38;5;124mformat[39m[38;5;124m'[39m] [38;5;241m=[39m [38;5;28mformat[39m
[0;32m---> 18[0m [38;5;28;01mreturn[39;00m [43mread[49m[43m([49m[43mfilename[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/astropy/io/ascii/ui.py:341[0m, in [0;36mread[0;34m(table, guess, **kwargs)[0m
[1;32m    335[0m             new_kwargs[[38;5;124m'[39m[38;5;124mguess_html[39m[38;5;124m'[39m] [38;5;241m=[39m _probably_html(table)
[1;32m    337[0m [38;5;66;03m# Get the table from guess in ``dat``.  If ``dat`` comes back as None[39;00m
[1;32m    338[0m [38;5;66;03m# then there was just one set of kwargs in the guess list so fall[39;00m
[1;32m    339[0m [38;5;66;03m# through below to the non-guess way so that any problems result in a[39;00m
[1;32m    340[0m [38;5;66;03m# more useful traceback.[39;00m
[0;32m--> 341[0m dat [38;5;241m=[39m [43m_guess[49m[43m([49m[43mtable[49m[43m,[49m[43m [49m[43mnew_kwargs[49m[43m,[49m[43m [49m[38;5;28;43mformat[39;49m[43m,[49m[43m [49m[43mfast_reader[49m[43m)[49m
[1;32m    342[0m [38;5;28;01mif[39;00m dat [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[1;32m    343[0m     guess [38;5;241m=[39m [38;5;28;01mFalse[39;00m

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/astropy/io/ascii/ui.py:506[0m, in [0;36m_guess[0;34m(table, read_kwargs, format, fast_reader)[0m
[1;32m    503[0m reader [38;5;241m=[39m get_reader([38;5;241m*[39m[38;5;241m*[39mguess_kwargs)
[1;32m    505[0m reader[38;5;241m.[39mguessing [38;5;241m=[39m [38;5;28;01mTrue[39;00m
[0;32m--> 506[0m dat [38;5;241m=[39m [43mreader[49m[38;5;241;43m.[39;49m[43mread[49m[43m([49m[43mtable[49m[43m)[49m
[1;32m    507[0m _read_trace[38;5;241m.[39mappend({[38;5;124m'[39m[38;5;124mkwargs[39m[38;5;124m'[39m: copy[38;5;241m.[39mdeepcopy(guess_kwargs),
[1;32m    508[0m                     [38;5;124m'[39m[38;5;124mReader[39m[38;5;124m'[39m: reader[38;5;241m.[39m[38;5;18m__class__[39m,
[1;32m    509[0m                     [38;5;124m'[39m[38;5;124mstatus[39m[38;5;124m'[39m: [38;5;124m'[39m[38;5;124mSuccess (guessing)[39m[38;5;124m'[39m,
[1;32m    510[0m                     [38;5;124m'[39m[38;5;124mdt[39m[38;5;124m'[39m: [38;5;124mf[39m[38;5;124m'[39m[38;5;132;01m{[39;00m(time[38;5;241m.[39mtime() [38;5;241m-[39m t0) [38;5;241m*[39m [38;5;241m1000[39m[38;5;132;01m:[39;00m[38;5;124m.3f[39m[38;5;132;01m}[39;00m[38;5;124m ms[39m[38;5;124m'[39m})
[1;32m    511[0m [38;5;28;01mreturn[39;00m dat

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/astropy/io/ascii/core.py:1334[0m, in [0;36mBaseReader.read[0;34m(self, table)[0m
[1;32m   1331[0m     newline [38;5;241m=[39m [38;5;28;01mNone[39;00m
[1;32m   1333[0m [38;5;66;03m# Get a list of the lines (rows) in the table[39;00m
[0;32m-> 1334[0m [38;5;28mself[39m[38;5;241m.[39mlines [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43minputter[49m[38;5;241;43m.[39;49m[43mget_lines[49m[43m([49m[43mtable[49m[43m,[49m[43m [49m[43mnewline[49m[38;5;241;43m=[39;49m[43mnewline[49m[43m)[49m
[1;32m   1336[0m [38;5;66;03m# Set self.data.data_lines to a slice of lines contain the data rows[39;00m
[1;32m   1337[0m [38;5;28mself[39m[38;5;241m.[39mdata[38;5;241m.[39mget_data_lines([38;5;28mself[39m[38;5;241m.[39mlines)

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/astropy/io/ascii/core.py:329[0m, in [0;36mBaseInputter.get_lines[0;34m(self, table, newline)[0m
[1;32m    326[0m [38;5;28;01mtry[39;00m:
[1;32m    327[0m     [38;5;28;01mif[39;00m ([38;5;28mhasattr[39m(table, [38;5;124m'[39m[38;5;124mread[39m[38;5;124m'[39m)
[1;32m    328[0m             [38;5;129;01mor[39;00m ([38;5;124m'[39m[38;5;130;01m\n[39;00m[38;5;124m'[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m table [38;5;241m+[39m [38;5;124m'[39m[38;5;124m'[39m [38;5;129;01mand[39;00m [38;5;124m'[39m[38;5;130;01m\r[39;00m[38;5;124m'[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m table [38;5;241m+[39m [38;5;124m'[39m[38;5;124m'[39m)):
[0;32m--> 329[0m         [38;5;28;01mwith[39;00m get_readable_fileobj(table,
[1;32m    330[0m                                   encoding[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39mencoding) [38;5;28;01mas[39;00m fileobj:
[1;32m    331[0m             table [38;5;241m=[39m fileobj[38;5;241m.[39mread()
[1;32m    332[0m     [38;5;28;01mif[39;00m newline [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:

File [0;32m/usr/share/miniconda/lib/python3.9/contextlib.py:119[0m, in [0;36m_GeneratorContextManager.__enter__[0;34m(self)[0m
[1;32m    117[0m [38;5;28;01mdel[39;00m [38;5;28mself[39m[38;5;241m.[39margs, [38;5;28mself[39m[38;5;241m.[39mkwds, [38;5;28mself[39m[38;5;241m.[39mfunc
[1;32m    118[0m [38;5;28;01mtry[39;00m:
[0;32m--> 119[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mnext[39;49m[43m([49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mgen[49m[43m)[49m
[1;32m    120[0m [38;5;28;01mexcept[39;00m [38;5;167;01mStopIteration[39;00m:
[1;32m    121[0m     [38;5;28;01mraise[39;00m [38;5;167;01mRuntimeError[39;00m([38;5;124m"[39m[38;5;124mgenerator didn[39m[38;5;124m'[39m[38;5;124mt yield[39m[38;5;124m"[39m) [38;5;28;01mfrom[39;00m [38;5;28mNone[39m

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/astropy/utils/data.py:272[0m, in [0;36mget_readable_fileobj[0;34m(name_or_obj, encoding, cache, show_progress, remote_timeout, sources, http_headers)[0m
[1;32m    267[0m [38;5;28;01mif[39;00m is_url:
[1;32m    268[0m     name_or_obj [38;5;241m=[39m download_file(
[1;32m    269[0m         name_or_obj, cache[38;5;241m=[39mcache, show_progress[38;5;241m=[39mshow_progress,
[1;32m    270[0m         timeout[38;5;241m=[39mremote_timeout, sources[38;5;241m=[39msources,
[1;32m    271[0m         http_headers[38;5;241m=[39mhttp_headers)
[0;32m--> 272[0m fileobj [38;5;241m=[39m [43mio[49m[38;5;241;43m.[39;49m[43mFileIO[49m[43m([49m[43mname_or_obj[49m[43m,[49m[43m [49m[38;5;124;43m'[39;49m[38;5;124;43mr[39;49m[38;5;124;43m'[39;49m[43m)[49m
[1;32m    273[0m [38;5;28;01mif[39;00m is_url [38;5;129;01mand[39;00m [38;5;129;01mnot[39;00m cache:
[1;32m    274[0m     delete_fds[38;5;241m.[39mappend(fileobj)

[0;31mFileNotFoundError[0m: [Errno 2] No such file or directory: 'preimaging/pointsource_LMCcalField_F150W.cat'
FileNotFoundError: [Errno 2] No such file or directory: 'preimaging/pointsource_LMCcalField_F150W.cat'

