Traceback (most recent call last):
  File "/usr/share/miniconda/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/share/miniconda/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
data_model = ImageModel(s2d_file)
resampled_2d_image = data_model.data # if multiple SCI extensions, also specify EXTVER
weights_2d_image = data_model.wht # we will use this to estimate the per-pixel variance later

image_shape = resampled_2d_image.shape
print(image_shape) #note the swap of x and y
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
Input [0;32mIn [3][0m, in [0;36m<cell line: 1>[0;34m()[0m
[0;32m----> 1[0m data_model [38;5;241m=[39m [43mImageModel[49m[43m([49m[43ms2d_file[49m[43m)[49m
[1;32m      2[0m resampled_2d_image [38;5;241m=[39m data_model[38;5;241m.[39mdata [38;5;66;03m# if multiple SCI extensions, also specify EXTVER[39;00m
[1;32m      3[0m weights_2d_image [38;5;241m=[39m data_model[38;5;241m.[39mwht [38;5;66;03m# we will use this to estimate the per-pixel variance later[39;00m

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/stdatamodels/model_base.py:174[0m, in [0;36mDataModel.__init__[0;34m(self, init, schema, memmap, pass_invalid_values, strict_validation, validate_on_assignment, cast_fits_arrays, validate_arrays, ignore_missing_extensions, **kwargs)[0m
[1;32m    171[0m         schema [38;5;241m=[39m _DEFAULT_SCHEMA
[1;32m    172[0m     [38;5;28;01melse[39;00m:
[1;32m    173[0m         [38;5;66;03m# Create an AsdfFile so we can use its resolver for loading schemas[39;00m
[0;32m--> 174[0m         schema [38;5;241m=[39m [43masdf_schema[49m[38;5;241;43m.[39;49m[43mload_schema[49m[43m([49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mschema_url[49m[43m,[49m[43m [49m[43mresolve_references[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m
[1;32m    176[0m [38;5;28mself[39m[38;5;241m.[39m_schema [38;5;241m=[39m mschema[38;5;241m.[39mmerge_property_trees(schema)
[1;32m    178[0m [38;5;66;03m# Provide the object as context to other classes and functions[39;00m

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/asdf/schema.py:435[0m, in [0;36mload_schema[0;34m(url, resolver, resolve_references, resolve_local_refs)[0m
[1;32m    430[0m     resolver [38;5;241m=[39m extension[38;5;241m.[39mget_default_resolver()
[1;32m    432[0m [38;5;66;03m# We want to cache the work that went into constructing the schema, but returning[39;00m
[1;32m    433[0m [38;5;66;03m# the same object is treacherous, because users who mutate the result will not[39;00m
[1;32m    434[0m [38;5;66;03m# expect that they're changing the schema everywhere.[39;00m
[0;32m--> 435[0m [38;5;28;01mreturn[39;00m copy[38;5;241m.[39mdeepcopy([43m_load_schema_cached[49m[43m([49m[43murl[49m[43m,[49m[43m [49m[43mresolver[49m[43m,[49m[43m [49m[43mresolve_references[49m[43m,[49m[43m [49m[43mresolve_local_refs[49m[43m)[49m)

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/asdf/schema.py:482[0m, in [0;36m_load_schema_cached[0;34m(url, resolver, resolve_references, resolve_local_refs)[0m
[1;32m    479[0m [38;5;129m@lru_cache[39m()
[1;32m    480[0m [38;5;28;01mdef[39;00m [38;5;21m_load_schema_cached[39m(url, resolver, resolve_references, resolve_local_refs):
[1;32m    481[0m     loader [38;5;241m=[39m _make_schema_loader(resolver)
[0;32m--> 482[0m     schema, url [38;5;241m=[39m [43mloader[49m[43m([49m[43murl[49m[43m)[49m
[1;32m    484[0m     [38;5;28;01mif[39;00m resolve_references [38;5;129;01mor[39;00m resolve_local_refs:
[1;32m    486[0m         [38;5;28;01mdef[39;00m [38;5;21mresolve_refs[39m(node, json_id):

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/asdf/schema.py:359[0m, in [0;36m_make_schema_loader.<locals>.load_schema[0;34m(url)[0m
[1;32m    355[0m     [38;5;28;01mreturn[39;00m result, url
[1;32m    357[0m [38;5;66;03m# If not, this must be a URL (or missing).  Fall back to fetching[39;00m
[1;32m    358[0m [38;5;66;03m# the schema the old way:[39;00m
[0;32m--> 359[0m [38;5;28;01mreturn[39;00m [43m_load_schema[49m[43m([49m[43murl[49m[43m)[49m

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/asdf/schema.py:323[0m, in [0;36m_load_schema[0;34m(url)[0m
[1;32m    320[0m [38;5;129m@lru_cache[39m()
[1;32m    321[0m [38;5;28;01mdef[39;00m [38;5;21m_load_schema[39m(url):
[1;32m    322[0m     [38;5;28;01mif[39;00m url[38;5;241m.[39mstartswith([38;5;124m"[39m[38;5;124mhttp://[39m[38;5;124m"[39m) [38;5;129;01mor[39;00m url[38;5;241m.[39mstartswith([38;5;124m"[39m[38;5;124mhttps://[39m[38;5;124m"[39m) [38;5;129;01mor[39;00m url[38;5;241m.[39mstartswith([38;5;124m"[39m[38;5;124masdf://[39m[38;5;124m"[39m):
[0;32m--> 323[0m         [38;5;28;01mraise[39;00m [38;5;167;01mFileNotFoundError[39;00m([38;5;124m"[39m[38;5;124mUnable to fetch schema from non-file URL: [39m[38;5;124m"[39m [38;5;241m+[39m url)
[1;32m    325[0m     [38;5;28;01mwith[39;00m generic_io[38;5;241m.[39mget_file(url) [38;5;28;01mas[39;00m fd:
[1;32m    326[0m         [38;5;28;01mif[39;00m [38;5;28misinstance[39m(url, [38;5;28mstr[39m) [38;5;129;01mand[39;00m url[38;5;241m.[39mendswith([38;5;124m"[39m[38;5;124mjson[39m[38;5;124m"[39m):

[0;31mFileNotFoundError[0m: Unable to fetch schema from non-file URL: http://stsci.edu/schemas/jwst_datamodel/image.schema
FileNotFoundError: Unable to fetch schema from non-file URL: http://stsci.edu/schemas/jwst_datamodel/image.schema

